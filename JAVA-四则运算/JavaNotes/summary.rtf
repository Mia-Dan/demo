{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Monaco;\f2\fmodern\fcharset0 Courier-Oblique;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red13\green65\blue139;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c3529\c33725\c61569;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf2 \expnd0\expndtw0\kerning0
Summary of Variables\
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf0 \
The Java programming language uses both "fields" and "variables" as part of its terminology. Instance variables (non-static fields) are unique to each instance of a class. Class variables (static fields) are fields declared with the 
\f1 static
\f0  modifier; there is exactly one copy of a class variable, regardless of how many times the class has been instantiated. Local variables store temporary state inside a method. Parameters are variables that provide extra information to a method; both local variables and parameters are always classified as "variables" (not "fields"). When naming your fields or variables, there are rules and conventions that you should (or must) follow.\
\
The eight primitive data types are: byte, short, int, long, float, double, boolean, and char. The {\field{\*\fldinst{HYPERLINK "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"}}{\fldrslt 
\f1 \cf3 java.lang.String}} class represents character strings. The compiler will assign a reasonable default value for fields of the above types; for local variables, a default value is never assigned. A literal is the source code representation of a fixed value. An array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed.\
\
\
\pard\pardeftab720\partightenfactor0

\b\fs40 \cf2 Summary of Creating and Using Classes and Objects\
\pard\pardeftab720\partightenfactor0

\b0\fs26 \cf0 \
A class declaration names the class and encloses the class body between braces. The class name can be preceded by modifiers. The class body contains fields, methods, and constructors for the class. A class uses fields to contain state information and uses methods to implement behavior. Constructors that initialize a new instance of a class use the name of the class and look like methods without a return type.\
\
You control access to classes and members in the same way: by using an access modifier such as 
\f1 public
\f0  in their declaration.\
\
You specify a class variable or a class method by using the 
\f1 static
\f0  keyword in the member's declaration. A member that is not declared as 
\f1 static
\f0  is implicitly an instance member. Class variables are shared by all instances of a class and can be accessed through the class name as well as an instance reference. Instances of a class get their own copy of each instance variable, which must be accessed through an instance reference.\
\
You create an object from a class by using the 
\f1 new
\f0  operator and a constructor. The new operator returns a reference to the object that was created. You can assign the reference to a variable or use it directly.\
\
Instance variables and methods that are accessible to code outside of the class that they are declared in can be referred to by using a qualified name. The qualified name of an instance variable looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\i \cf0 objectReference.variableName
\f3\i0 \
\pard\pardeftab720\partightenfactor0

\f0 \cf0 The qualified name of a method looks like this:\
\pard\pardeftab720\partightenfactor0

\f2\i \cf0 objectReference.methodName(argumentList)
\f3\i0 \
\pard\pardeftab720\partightenfactor0

\f0 \cf0 or:\
\pard\pardeftab720\partightenfactor0

\f2\i \cf0 objectReference.methodName()\

\f3\i0 \
\pard\pardeftab720\partightenfactor0

\f0 \cf0 The garbage collector automatically cleans up unused objects. An object is unused if the program holds no more references to it. You can explicitly drop a reference by setting the variable holding the reference to 
\f1 null
\f0 .}