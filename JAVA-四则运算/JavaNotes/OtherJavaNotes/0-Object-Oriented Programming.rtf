{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Tahoma;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red255\green255\blue10;\red0\green0\blue0;\red38\green38\blue38;
\red255\green255\blue255;\red230\green230\blue230;}
{\*\expandedcolortbl;;\cssrgb\c99942\c98555\c0;\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;
\cssrgb\c100000\c100000\c100000;\csgray\c92143;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf0 \expnd0\expndtw0\kerning0
Software objects are conceptually similar to real-world objects: they too consist of state and related behavior. An object stores its state in 
\i \cb2 fields
\i0  (variables\cb1  in some programming languages) and exposes its behavior through 
\i \cb2 methods
\i0  (functions\cb1  in some programming languages). Methods operate on an object's internal state and serve as the primary mechanism for object-to-object communication. \
\
Hiding internal state and requiring all interaction to be performed through an object's methods is known as 
\i \cb2 data encapsulation
\i0 \cb1  \'97 a fundamental principle of object-oriented programming.\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 {\listtext	1	}\cf0 \expnd0\expndtw0\kerning0
Modularity: The source code for an object can be written and maintained independently of the source code for other objects. Once created, an object can be easily passed around inside the system.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Information-hiding: By interacting only with an object's methods, the details of its internal implementation remain hidden from the outside world.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Code re-use: If an object already exists (perhaps written by another software developer), you can use that object in your program. This allows specialists to implement/test/debug complex, task-specific objects, which you can then trust to run in your own code.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Pluggability and debugging ease: If a particular object turns out to be problematic, you can simply remove it from your application and plug in a different object as its replacement. This is analogous to fixing mechanical problems in the real world. If a bolt breaks, you replace 
\i it
\i0 , not the entire machine.\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\b\fs30 \cf4 Object-Oriented Programming Concepts\
\pard\pardeftab720\partightenfactor0

\fs34 \cf4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b0\fs26 \cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Real-world objects contain 
\b state
\b0  and 
\b behavior
\b0 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
A software object's state is stored in 
\b fields
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
A software object's behavior is exposed through 
\b methods
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
Hiding internal data from the outside world, and accessing it only through publicly exposed methods is known as data 
\b encapsulation
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
A blueprint for a software object is called a 
\b class
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	6	}\expnd0\expndtw0\kerning0
Common behavior can be defined in a 
\b superclass
\b0  and inherited into a 
\b subclass
\b0  using the 
\b extends
\b0  keyword.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	7	}\expnd0\expndtw0\kerning0
A collection of methods with no implementation is called an 
\b interface
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	8	}\expnd0\expndtw0\kerning0
A namespace that organizes classes and interfaces by functionality is called a 
\b package
\b0 .\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	9	}\expnd0\expndtw0\kerning0
The term API stands for 
\b Application Programming Interface
\b0 .\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\pard\pardeftab720\qj\partightenfactor0

\f1\b \cf0 \cb5 procedural-oriented vs. Object-Oriented:
\f0\b0 \cb1 \
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\qj\partightenfactor0

\f1 \cf0 \cb5 Traditional procedural-oriented programming languages (such as C, Fortran, Cobol and Pascal) suffer some notable drawbacks in creating reusable software components:\
\cb1 \
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb5 1 The procedural-oriented programs are made up of functions. Functions are less reusable. It is very difficult to copy a function from one program and reuse in another program because the function is likely to reference the global variables and other functions. In other words, functions are not \cb2 well-encapsulated as a self-contained reusable unit\cb5 .\
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb1 \
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb5 \kerning1\expnd0\expndtw0 2 \expnd0\expndtw0\kerning0
The procedural languages are not suitable of \cb2 high-level abstraction\cb5  for solving real life problems. For example, C programs uses constructs such as if-else, for-loop, array, method, pointer, which are low-level and hard to abstract real problems such as a Customer Relationship Management (CRM) system or a computer soccer game.\cb1 \
\pard\pardeftab720\qj\partightenfactor0
\cf0 \cb5 The traditional procedural-languages separate the data structures (variables) and algorithms (functions).\
\
\
Object-Oriented technology has many benefits:\
\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls3\ilvl0\cf0 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\cb2 \expnd0\expndtw0\kerning0
Ease in software design\cb5  as you could think in the problem space rather than the machine's bits and bytes. You are dealing with high-level concepts and abstractions. Ease in design leads to more productive software development.\cb1 \
\ls3\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\cb2 \expnd0\expndtw0\kerning0
Ease in software maintenance\cb5 : object-oriented software are easier to understand, therefore easier to test, debug, and maintain.\cb1 \
\ls3\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\cb2 \expnd0\expndtw0\kerning0
Reusable software\cb5 : you don't need to keep re-inventing the wheels and re-write the same functions for different situations. The fastest and safest way of developing a new application is to reuse existing codes - fully tested and proven codes.\
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\qj\partightenfactor0
\cf6 As an example, suppose you wish to write a computer soccer games (which I consider as a complex application). It is quite difficult to model the game in procedural-oriented languages. But using OOP languages, you can easily model the program accordingly to the "real things" appear in the soccer games.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls4\ilvl0\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Player: attributes include name, number, location in the field, and etc; operations include run, jump, kick-the-ball, and etc.\cb1 \
\ls4\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Ball:\cb1 \
\ls4\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Reference:\cb1 \
\ls4\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Field:\cb1 \
\ls4\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Audience:\cb1 \
\ls4\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Weather:\cb1 \
\pard\pardeftab720\qj\partightenfactor0
\cf6 \cb5 Most importantly, some of these classes (such as 
\f2 Ball
\f1  and 
\f2 Audience
\f1 ) can be reused in another application, e.g., computer basketball game, with little or no modification.\
\pard\pardeftab720\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\qj\partightenfactor0

\f0 \cf0 \cb1 \
}