{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Tahoma;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red230\green230\blue230;}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\csgray\c92143;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\qj\partightenfactor0

\f0\fs26 \cf0 \cb2 \expnd0\expndtw0\kerning0
Traditional procedural-oriented programming languages (such as C, Fortran, Cobol and Pascal) suffer some notable drawbacks in creating reusable software components:\
\cb1 \
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb2 1 The procedural-oriented programs are made up of functions. Functions are less reusable. It is very difficult to copy a function from one program and reuse in another program because the function is likely to reference the global variables and other functions. In other words, functions are not well-encapsulated as a self-contained reusable unit.\
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb1 \
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \cb2 \kerning1\expnd0\expndtw0 2 \expnd0\expndtw0\kerning0
The procedural languages are not suitable of high-level abstraction for solving real life problems. For example, C programs uses constructs such as if-else, for-loop, array, method, pointer, which are low-level and hard to abstract real problems such as a Customer Relationship Management (CRM) system or a computer soccer game.\cb1 \
\pard\pardeftab720\qj\partightenfactor0
\cf0 \cb2 The traditional procedural-languages separate the data structures (variables) and algorithms (functions).\
\
\
Object-Oriented technology has many benefits:\
\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls1\ilvl0\cf0 \cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Ease in software design as you could think in the problem space rather than the machine's bits and bytes. You are dealing with high-level concepts and abstractions. Ease in design leads to more productive software development.\cb1 \
\ls1\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Ease in software maintenance: object-oriented software are easier to understand, therefore easier to test, debug, and maintain.\cb1 \
\ls1\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Reusable software: you don't need to keep re-inventing the wheels and re-write the same functions for different situations. The fastest and safest way of developing a new application is to reuse existing codes - fully tested and proven codes.\
\pard\tx566\pardeftab720\qj\partightenfactor0
\cf0 \
\pard\pardeftab720\qj\partightenfactor0
\cf3 As an example, suppose you wish to write a computer soccer games (which I consider as a complex application). It is quite difficult to model the game in procedural-oriented languages. But using OOP languages, you can easily model the program accordingly to the "real things" appear in the soccer games.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls2\ilvl0\cf3 \cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Player: attributes include name, number, location in the field, and etc; operations include run, jump, kick-the-ball, and etc.\cb1 \
\ls2\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Ball:\cb1 \
\ls2\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Reference:\cb1 \
\ls2\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Field:\cb1 \
\ls2\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Audience:\cb1 \
\ls2\ilvl0\cb2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Weather:\cb1 \
\pard\pardeftab720\qj\partightenfactor0
\cf3 \cb2 Most importantly, some of these classes (such as 
\f1 Ball
\f0  and 
\f1 Audience
\f0 ) can be reused in another application, e.g., computer basketball game, with little or no modification.\
\pard\pardeftab720\qj\partightenfactor0
\cf0 \
a\
}